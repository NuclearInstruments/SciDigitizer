stages:
  - build
  - setup
  - sign  
  - release




build_vs2022_windows:
  stage: build
  script:
    - ./build.ps1 $CI_COMMIT_TAG
  tags:
    - windows
  artifacts:
    untracked: false
    name: windows
    paths:
      - BIN\  
    expire_in: 1 week 
  rules:
    - if: $CI_COMMIT_TAG



build_setup:
  stage: setup
  image: registry.lanni/microsoft/innosetup:latest
  dependencies: 
  - build_vs2022_windows  
  script:
    - .\build-setup.ps1 $CI_COMMIT_TAG
  tags:
    - docker-windows
  artifacts:
    untracked: false
    name: windows
    paths:
      - INNOSETUP_BUILD/output/*.exe   
    expire_in: 1 week 
  rules:
    - if: $CI_COMMIT_TAG
  when: on_success
    

digital_signature:
  stage: sign
  dependencies: 
  - build_setup  
  script:
    - sign_executable.cmd "INNOSETUP_BUILD/output/SciCompiler-setup.exe"
  tags:
    - windows-signature
  artifacts:
    untracked: false
    expire_in: "30 days"
    paths:
      - INNOSETUP_BUILD/output/oh-readout-setup.exe
  rules:
    - if: $CI_COMMIT_TAG

  when: on_success



ni_release:
  stage: release

  dependencies: 
  - digital_signature

  image: registry.lanni/apps/release-manager:latest

  script:
    - nirelease -c -v $CI_COMMIT_TAG -m "Autogenerated by pipeline with tag $CI_COMMIT_TAG"
    - echo "Generate diff from last release for the latest release"
    - if [ -f CHANGELOG.md ]; then LATEST_TAG=`git tag --sort=-creatordate | head -2 | tail -n 1`; fi
    - if [ -f CHANGELOG.md ]; then git diff $LATEST_TAG ./CHANGELOG.md | tail -n +6 | sed -n "/^+/p" | sed -e "s/^+//" > ./latestChanges.md; fi
    - if [ ! -f CHANGELOG.md ]; then touch latestChanges.md; fi
    - echo "Creating release with the following changelog changes:"
    - cat latestChanges.md    
    - export URLNR=$(nirelease --geturl)
    - release-cli create --description "./latestChanges.md" --tag-name "$CI_COMMIT_TAG" --assets-link "[{\"url\":\"$URLNR\",\"name\":\"OpenHardwareReadout-Setup-$CI_COMMIT_TAG\"}]"

    # upload file to nidrive and get shared link
    - mv INNOSETUP_BUILD/output/SciCompiler-setup.exe SciCompiler-setup-${CI_COMMIT_TAG}.exe
    - nidrive upload --file oh-readout-setup-${CI_COMMIT_TAG}.exe --destination releases/
    - nidrive share_link --path releases/oh-readout-setup-${CI_COMMIT_TAG}.exe > shared_link.txt

    # send email with the shared link
    - export LINK=`cat shared_link.txt`
    - export APP_NAME=`basename $(git rev-parse --show-toplevel)`
    - cp email/email-template.json email/email-message.json
    - sed -i "s,{{ app }},${APP_NAME},g" email/email-message.json
    - sed -i "s,{{ shared_link }},${LINK},g" "email/email-message.json"
    - sed -i "s,{{ version }},${CI_COMMIT_TAG},g" "email/email-message.json"
    - nimailsender send-template --file email/email-message.json

  rules:
    - if: $CI_COMMIT_TAG
  when: on_success
